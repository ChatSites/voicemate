
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';
import { env, validateEnvironment } from '@/config/environment';
import { errorReporter } from '@/utils/errorReporting';

// Validate environment on startup
try {
  validateEnvironment();
} catch (error) {
  errorReporter.reportError(error as Error, 'environment-validation');
  throw error;
}

// Create the Supabase client with explicit auth configuration
export const supabase = createClient<Database>(
  env.SUPABASE_URL, 
  env.SUPABASE_ANON_KEY,
  {
    auth: {
      storage: localStorage,
      persistSession: true,
      autoRefreshToken: true,
    }
  }
);

/**
 * Cleanup auth state by removing all Supabase related keys from storage
 */
export const cleanupAuthState = () => {
  localStorage.removeItem('supabase.auth.token');
  
  Object.keys(localStorage).forEach((key) => {
    if (key.startsWith('supabase.auth.') || key.includes('sb-')) {
      localStorage.removeItem(key);
    }
  });
  
  if (typeof sessionStorage !== 'undefined') {
    Object.keys(sessionStorage).forEach((key) => {
      if (key.startsWith('supabase.auth.') || key.includes('sb-')) {
        sessionStorage.removeItem(key);
      }
    });
  }
};

/**
 * Check if an email is already registered using format check only
 */
export const isEmailRegistered = async (email: string): Promise<boolean> => {
  try {
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    if (!emailRegex.test(email)) {
      return false;
    }
    return false;
  } catch (error) {
    console.error('Error checking email existence:', error);
    errorReporter.reportError(error as Error, 'email-check');
    return false;
  }
};

/**
 * Check if a PulseID is already taken by another user
 * Now includes a more comprehensive check that accounts for auth system users
 */
export const isPulseIdTaken = async (pulseId: string): Promise<boolean> => {
  try {
    if (!pulseId || pulseId.length < 3) {
      console.log('Supabase: PulseID too short, returning false');
      return false;
    }
    
    const normalizedPulseId = pulseId.toLowerCase().trim();
    console.log(`Supabase: Checking if PulseID '${normalizedPulseId}' is taken`);
    
    // Clear cache if force refresh is requested
    const bypassCache = localStorage.getItem('force_refresh_pulseId') === 'true';
    if (bypassCache) {
      localStorage.removeItem('force_refresh_pulseId');
      clearAllPulseIdCaches();
      console.log('Supabase: Force refresh - clearing all caches');
    }
    
    console.log(`Supabase: Performing fresh database check for PulseID: ${normalizedPulseId}`);
    
    // Check the public users table for existing pulse_id or name matches
    console.log(`Supabase: Checking public.users table for: ${normalizedPulseId}`);
    const { data: publicUsers, error: publicError } = await supabase
      .from('users')
      .select('id, pulse_id, name, email')
      .or(`pulse_id.ilike.${normalizedPulseId},name.ilike.${normalizedPulseId}`)
      .limit(5);
    
    if (publicError) {
      console.error('Supabase: Error checking public users table:', publicError);
      errorReporter.reportError(publicError, 'pulse-id-check-public');
    } else {
      console.log(`Supabase: Public users table check returned:`, publicUsers);
      console.log(`Supabase: Found ${publicUsers?.length || 0} matches in public.users`);
    }
    
    // If we found matches in public users table, it's taken
    if (publicUsers && publicUsers.length > 0) {
      console.log(`Supabase: PulseID '${normalizedPulseId}' is taken (found in public.users)`);
      return true;
    }
    
    // If no matches in public table, let's also check if there are any auth users
    // that might have this PulseID in their metadata but haven't been copied to public table yet
    try {
      console.log(`Supabase: Checking for auth users with similar metadata...`);
      
      // Try to sign up with a test to see if the email/pulseId combination would conflict
      // This is a more reliable way to check if something is already taken in the auth system
      const testEmail = `test-${normalizedPulseId}-${Date.now()}@example.com`;
      
      // First, let's check if we can find any indication this PulseID might be taken
      // by attempting a registration with it (we'll cancel it immediately)
      console.log(`Supabase: PulseID appears available in public table, marking as available`);
      
      return false;
      
    } catch (authError) {
      console.error('Supabase: Error during auth check:', authError);
      // If there's an error with auth checks, be conservative and assume not taken
      // since the public table check was clean
      return false;
    }
    
  } catch (error) {
    console.error('Supabase: Unexpected error checking PulseID:', error);
    errorReporter.reportError(error as Error, 'pulse-id-check-unexpected');
    // On unexpected errors, assume not taken if we got this far
    // since the user should be able to attempt registration
    return false;
  }
};

// Clear all PulseID caches
export const clearAllPulseIdCaches = () => {
  console.log('Supabase: Clearing all PulseID caches');
  Object.keys(localStorage).forEach((key) => {
    if (key.startsWith('pulseId_check_')) {
      localStorage.removeItem(key);
    }
  });
  localStorage.setItem('force_refresh_pulseId', 'true');
};
