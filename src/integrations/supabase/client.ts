
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';
import { env, validateEnvironment } from '@/config/environment';
import { errorReporter } from '@/utils/errorReporting';

// Validate environment on startup
try {
  validateEnvironment();
} catch (error) {
  errorReporter.reportError(error as Error, 'environment-validation');
  throw error;
}

// Create the Supabase client with explicit auth configuration
export const supabase = createClient<Database>(
  env.SUPABASE_URL, 
  env.SUPABASE_ANON_KEY,
  {
    auth: {
      storage: localStorage,
      persistSession: true,
      autoRefreshToken: true,
    }
  }
);

/**
 * Cleanup auth state by removing all Supabase related keys from storage
 */
export const cleanupAuthState = () => {
  localStorage.removeItem('supabase.auth.token');
  
  Object.keys(localStorage).forEach((key) => {
    if (key.startsWith('supabase.auth.') || key.includes('sb-')) {
      localStorage.removeItem(key);
    }
  });
  
  if (typeof sessionStorage !== 'undefined') {
    Object.keys(sessionStorage).forEach((key) => {
      if (key.startsWith('supabase.auth.') || key.includes('sb-')) {
        sessionStorage.removeItem(key);
      }
    });
  }
};

/**
 * Check if an email is already registered using format check only
 */
export const isEmailRegistered = async (email: string): Promise<boolean> => {
  try {
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    if (!emailRegex.test(email)) {
      return false;
    }
    return false;
  } catch (error) {
    console.error('Error checking email existence:', error);
    errorReporter.reportError(error as Error, 'email-check');
    return false;
  }
};

/**
 * Check if a PulseID is already taken by another user
 * Improved version with better query logic
 */
export const isPulseIdTaken = async (pulseId: string): Promise<boolean> => {
  try {
    if (!pulseId || pulseId.length < 3) {
      console.log('Supabase: PulseID too short, returning false');
      return false;
    }
    
    const normalizedPulseId = pulseId.toLowerCase().trim();
    console.log(`Supabase: Checking if PulseID '${normalizedPulseId}' is taken`);
    
    // Clear cache if force refresh is requested
    const bypassCache = localStorage.getItem('force_refresh_pulseId') === 'true';
    if (bypassCache) {
      localStorage.removeItem('force_refresh_pulseId');
      clearAllPulseIdCaches();
      console.log('Supabase: Force refresh - clearing all caches');
    }
    
    // Check cache for recent results (only 100ms to ensure freshness for this critical check)
    const cacheKey = `pulseId_check_${normalizedPulseId}`;
    const cachedResult = !bypassCache ? localStorage.getItem(cacheKey) : null;
    
    if (cachedResult) {
      const { result, timestamp } = JSON.parse(cachedResult);
      if (Date.now() - timestamp < 100) {
        console.log(`Supabase: Using cached result for ${normalizedPulseId}: ${result ? 'taken' : 'available'}`);
        return result;
      }
    }
    
    console.log(`Supabase: Performing fresh database check for PulseID: ${normalizedPulseId}`);
    
    // Use two separate queries to be absolutely sure we catch all matches
    console.log(`Supabase: Checking pulse_id column for: ${normalizedPulseId}`);
    const { data: pulseIdMatches, error: pulseIdError } = await supabase
      .from('users')
      .select('id, pulse_id, email')
      .eq('pulse_id', normalizedPulseId)
      .limit(1);
    
    if (pulseIdError) {
      console.error('Supabase: Error checking pulse_id column:', pulseIdError);
    } else {
      console.log(`Supabase: pulse_id column check returned:`, pulseIdMatches);
    }
    
    console.log(`Supabase: Checking name column for: ${normalizedPulseId}`);
    const { data: nameMatches, error: nameError } = await supabase
      .from('users')
      .select('id, name, email')
      .eq('name', normalizedPulseId)
      .limit(1);
    
    if (nameError) {
      console.error('Supabase: Error checking name column:', nameError);
    } else {
      console.log(`Supabase: name column check returned:`, nameMatches);
    }
    
    // If either query had an error, assume taken to be safe
    if (pulseIdError || nameError) {
      console.error('Supabase: Database error during PulseID check, assuming taken');
      errorReporter.reportError(new Error(`PulseID check error: ${pulseIdError?.message || nameError?.message}`), 'pulse-id-check');
      return true;
    }
    
    // Check if we found any matches in either column
    const pulseIdTaken = Array.isArray(pulseIdMatches) && pulseIdMatches.length > 0;
    const nameTaken = Array.isArray(nameMatches) && nameMatches.length > 0;
    const isTaken = pulseIdTaken || nameTaken;
    
    console.log(`Supabase: PulseID check results:`, {
      normalizedPulseId,
      pulseIdMatches: pulseIdMatches?.length || 0,
      nameMatches: nameMatches?.length || 0,
      pulseIdTaken,
      nameTaken,
      finalResult: isTaken ? 'TAKEN' : 'AVAILABLE'
    });
    
    // Cache the result for only 100ms
    localStorage.setItem(cacheKey, JSON.stringify({
      result: isTaken,
      timestamp: Date.now()
    }));
    
    console.log(`Supabase: Final result for '${normalizedPulseId}': ${isTaken ? 'TAKEN' : 'AVAILABLE'}`);
    
    return isTaken;
  } catch (error) {
    console.error('Supabase: Unexpected error checking PulseID:', error);
    errorReporter.reportError(error as Error, 'pulse-id-check-unexpected');
    // On unexpected errors, assume taken to be safe
    return true;
  }
};

// Clear all PulseID caches
export const clearAllPulseIdCaches = () => {
  console.log('Supabase: Clearing all PulseID caches');
  Object.keys(localStorage).forEach((key) => {
    if (key.startsWith('pulseId_check_')) {
      localStorage.removeItem(key);
    }
  });
  localStorage.setItem('force_refresh_pulseId', 'true');
};
