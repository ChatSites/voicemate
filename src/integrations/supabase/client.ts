
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';
import { env, validateEnvironment } from '@/config/environment';
import { errorReporter } from '@/utils/errorReporting';

// Validate environment on startup
try {
  validateEnvironment();
} catch (error) {
  errorReporter.reportError(error as Error, 'environment-validation');
  throw error;
}

// Create the Supabase client with explicit auth configuration
export const supabase = createClient<Database>(
  env.SUPABASE_URL, 
  env.SUPABASE_ANON_KEY,
  {
    auth: {
      storage: localStorage,
      persistSession: true,
      autoRefreshToken: true,
    }
  }
);

/**
 * Cleanup auth state by removing all Supabase related keys from storage
 */
export const cleanupAuthState = () => {
  localStorage.removeItem('supabase.auth.token');
  
  Object.keys(localStorage).forEach((key) => {
    if (key.startsWith('supabase.auth.') || key.includes('sb-')) {
      localStorage.removeItem(key);
    }
  });
  
  if (typeof sessionStorage !== 'undefined') {
    Object.keys(sessionStorage).forEach((key) => {
      if (key.startsWith('supabase.auth.') || key.includes('sb-')) {
        sessionStorage.removeItem(key);
      }
    });
  }
};

/**
 * Check if an email is already registered using format check only
 */
export const isEmailRegistered = async (email: string): Promise<boolean> => {
  try {
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    if (!emailRegex.test(email)) {
      return false;
    }
    return false;
  } catch (error) {
    console.error('Error checking email existence:', error);
    errorReporter.reportError(error as Error, 'email-check');
    return false;
  }
};

/**
 * Check if a PulseID is already taken using the new security definer function
 */
export const isPulseIdTaken = async (pulseId: string): Promise<boolean> => {
  try {
    if (!pulseId || pulseId.length < 3) {
      console.log('Supabase: PulseID too short, returning false');
      return false;
    }
    
    const normalizedPulseId = pulseId.toLowerCase().trim();
    console.log(`Supabase: Checking if PulseID '${normalizedPulseId}' is taken using security function`);
    
    // Clear cache if force refresh is requested
    const bypassCache = localStorage.getItem('force_refresh_pulseId') === 'true';
    if (bypassCache) {
      localStorage.removeItem('force_refresh_pulseId');
      clearAllPulseIdCaches();
      console.log('Supabase: Force refresh - clearing all caches');
    }
    
    console.log(`Supabase: Using validate_pulse_id_exists function for: ${normalizedPulseId}`);
    
    // Use the new security definer function for safe pulse ID validation
    const { data, error } = await supabase
      .rpc('validate_pulse_id_exists', { pulse_id_input: normalizedPulseId });
    
    if (error) {
      console.error('Supabase: Error checking pulse ID with security function:', error);
      errorReporter.reportError(error, 'pulse-id-check-security-function');
      // On error, be conservative and assume not taken so user can attempt registration
      return false;
    }
    
    console.log(`Supabase: Security function returned: ${data}`);
    return Boolean(data);
    
  } catch (error) {
    console.error('Supabase: Unexpected error checking PulseID:', error);
    errorReporter.reportError(error as Error, 'pulse-id-check-unexpected');
    // On unexpected errors, assume not taken so user can attempt registration
    return false;
  }
};

// Clear all PulseID caches
export const clearAllPulseIdCaches = () => {
  console.log('Supabase: Clearing all PulseID caches');
  Object.keys(localStorage).forEach((key) => {
    if (key.startsWith('pulseId_check_')) {
      localStorage.removeItem(key);
    }
  });
  localStorage.setItem('force_refresh_pulseId', 'true');
};
