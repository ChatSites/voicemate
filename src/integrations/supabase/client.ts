
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';
import { env, validateEnvironment } from '@/config/environment';
import { errorReporter } from '@/utils/errorReporting';

// Validate environment on startup
try {
  validateEnvironment();
} catch (error) {
  errorReporter.reportError(error as Error, 'environment-validation');
  throw error;
}

// Create the Supabase client with explicit auth configuration
export const supabase = createClient<Database>(
  env.SUPABASE_URL, 
  env.SUPABASE_ANON_KEY,
  {
    auth: {
      storage: localStorage,
      persistSession: true,
      autoRefreshToken: true,
    }
  }
);

/**
 * Cleanup auth state by removing all Supabase related keys from storage
 */
export const cleanupAuthState = () => {
  localStorage.removeItem('supabase.auth.token');
  
  Object.keys(localStorage).forEach((key) => {
    if (key.startsWith('supabase.auth.') || key.includes('sb-')) {
      localStorage.removeItem(key);
    }
  });
  
  if (typeof sessionStorage !== 'undefined') {
    Object.keys(sessionStorage).forEach((key) => {
      if (key.startsWith('supabase.auth.') || key.includes('sb-')) {
        sessionStorage.removeItem(key);
      }
    });
  }
};

/**
 * Check if an email is already registered using format check only
 */
export const isEmailRegistered = async (email: string): Promise<boolean> => {
  try {
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    if (!emailRegex.test(email)) {
      return false;
    }
    return false;
  } catch (error) {
    console.error('Error checking email existence:', error);
    errorReporter.reportError(error as Error, 'email-check');
    return false;
  }
};

/**
 * Check if a PulseID is already taken by another user
 * Enhanced version with better error handling and debugging
 */
export const isPulseIdTaken = async (pulseId: string): Promise<boolean> => {
  try {
    if (!pulseId || pulseId.length < 3) {
      console.log('Supabase: PulseID too short, skipping check');
      return false;
    }
    
    const normalizedPulseId = pulseId.toLowerCase().trim();
    
    // Clear any existing cache if force refresh is requested
    const bypassCache = localStorage.getItem('force_refresh_pulseId') === 'true';
    if (bypassCache) {
      localStorage.removeItem('force_refresh_pulseId');
      clearAllPulseIdCaches();
      console.log('Supabase: Force refresh - clearing all caches');
    }
    
    // Check cache for very recent results (only 1 second to ensure freshness)
    const cacheKey = `pulseId_check_${normalizedPulseId}`;
    const cachedResult = !bypassCache ? localStorage.getItem(cacheKey) : null;
    
    if (cachedResult) {
      const { result, timestamp } = JSON.parse(cachedResult);
      if (Date.now() - timestamp < 1000) {
        console.log(`Supabase: Using cached result for ${normalizedPulseId}: ${result ? 'taken' : 'available'}`);
        return result;
      }
    }
    
    console.log(`Supabase: Performing fresh database check for PulseID: ${normalizedPulseId}`);
    
    // Enhanced query that checks for PulseID with better case handling
    // First, let's see all PulseIDs in the database for debugging
    const { data: allPulseIds, error: debugError } = await supabase
      .from('users')
      .select('pulse_id')
      .not('pulse_id', 'is', null);
    
    if (debugError) {
      console.error('Supabase: Error fetching all PulseIDs for debugging:', debugError);
    } else {
      console.log('Supabase: All existing PulseIDs in database:', allPulseIds?.map(u => u.pulse_id));
    }
    
    // Primary check using ilike for case-insensitive search
    const { data, error } = await supabase
      .from('users')
      .select('id, pulse_id')
      .ilike('pulse_id', normalizedPulseId)
      .limit(10); // Increased limit to see if there are multiple matches
    
    if (error) {
      console.error('Supabase: Database error during PulseID check:', error);
      errorReporter.reportError(new Error(error.message), 'pulse-id-check-primary');
      // Don't cache errors, return false to allow registration
      return false;
    }
    
    // Check if we got any results
    const isTaken = Array.isArray(data) && data.length > 0;
    
    if (isTaken) {
      console.log(`Supabase: PulseID '${normalizedPulseId}' is TAKEN. Found ${data.length} matches:`, data);
    } else {
      console.log(`Supabase: PulseID '${normalizedPulseId}' is AVAILABLE - no matches found`);
    }
    
    // Additional verification with exact match
    const { data: exactMatch, error: exactError } = await supabase
      .from('users')
      .select('id, pulse_id')
      .eq('pulse_id', normalizedPulseId)
      .limit(1);
    
    if (!exactError && exactMatch && exactMatch.length > 0) {
      console.log(`Supabase: Exact match found for '${normalizedPulseId}':`, exactMatch);
      // Cache the result for 1 second only
      localStorage.setItem(cacheKey, JSON.stringify({
        result: true,
        timestamp: Date.now()
      }));
      return true;
    }
    
    // Cache the result for 1 second only
    localStorage.setItem(cacheKey, JSON.stringify({
      result: isTaken,
      timestamp: Date.now()
    }));
    
    return isTaken;
  } catch (error) {
    console.error('Supabase: Unexpected error checking PulseID:', error);
    errorReporter.reportError(error as Error, 'pulse-id-check-unexpected');
    // On unexpected errors, don't block registration
    return false;
  }
};

// Clear all PulseID caches
export const clearAllPulseIdCaches = () => {
  console.log('Supabase: Clearing all PulseID caches');
  Object.keys(localStorage).forEach((key) => {
    if (key.startsWith('pulseId_check_')) {
      localStorage.removeItem(key);
    }
  });
  localStorage.setItem('force_refresh_pulseId', 'true');
};
