
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://vzbadytmoatrwrvgemne.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InZ6YmFkeXRtb2F0cndydmdlbW5lIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDY3Mjg5MzIsImV4cCI6MjA2MjMwNDkzMn0.KdyaGRXGKULvjiclJsDFdtDdpb_i8F7wTsPweJPnFa0";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    storage: localStorage,
    persistSession: true,
    autoRefreshToken: true,
    debug: true, // Enable debug mode to see more logs
  }
});

// Helper functions for authentication to prevent common issues
export const cleanupAuthState = () => {
  // Remove auth tokens and session data
  localStorage.removeItem('supabase.auth.token');
  
  // Clear all Supabase-related keys in localStorage
  Object.keys(localStorage).forEach((key) => {
    if (key.startsWith('supabase.auth.') || key.includes('sb-')) {
      console.log(`Removing auth key: ${key}`);
      localStorage.removeItem(key);
    }
  });
  
  // Clear session storage as well if it exists
  if (typeof sessionStorage !== 'undefined') {
    Object.keys(sessionStorage || {}).forEach((key) => {
      if (key.startsWith('supabase.auth.') || key.includes('sb-')) {
        console.log(`Removing session key: ${key}`);
        sessionStorage.removeItem(key);
      }
    });
  }
};

// Check if an email is already registered - IMPROVED VERSION
export const isEmailRegistered = async (email: string): Promise<boolean> => {
  if (!email || !email.includes('@')) {
    return false; // Invalid email format
  }

  try {
    // Simplify the check to avoid false positives
    const { data, error } = await supabase.auth.signInWithOtp({
      email: email,
      options: {
        shouldCreateUser: false, // Don't create a new user if it doesn't exist
      }
    });

    // If signInWithOtp returns an error saying the user doesn't exist, then the email is available
    if (error && (
      error.message.includes("Email not found") || 
      error.message.includes("User not found") ||
      error.message.includes("For security purposes")
    )) {
      console.log('Email appears to be available:', email);
      return false;
    }

    // If there was no error or another type of error, the email likely exists
    console.log('Email appears to exist or error occurred:', email);
    return true;
  } catch (error) {
    console.error('Error checking email registration:', error);
    return false; // Assume email is available on error to allow registration attempt
  }
};

// Check if a PulseID is already taken - IMPROVED VERSION
export const isPulseIdTaken = async (pulseId: string): Promise<boolean> => {
  try {
    if (!pulseId || pulseId.trim() === '') {
      return true; // Consider empty pulseId as taken
    }
    
    // Log the check for debugging
    console.log(`Checking availability for PulseID: ${pulseId}`);
    
    // Check if PulseID exists in profiles table
    const { data, error } = await supabase
      .from('profiles')
      .select('username')
      .eq('username', pulseId)
      .maybeSingle();
      
    if (error) {
      console.error('Error checking PulseID availability:', error);
      
      // IMPORTANT: For auth errors (401) or any other errors, return false to allow registration
      console.log('Error occurred when checking PulseID, assuming available:', pulseId);
      return false; // Always allow registration attempts on errors
    }
    
    // If data exists, PulseID is taken, otherwise it's available
    const isTaken = !!data;
    console.log(`PulseID ${pulseId} is ${isTaken ? 'TAKEN' : 'available'} (database result)`);
    return isTaken;
  } catch (error) {
    console.error('Error checking PulseID:', error);
    return false; // Assume available on error to allow registration attempt
  }
};

// Debug user registration
export const debugRegistration = async (email: string, password: string, userData: any) => {
  console.log('--- DEBUG REGISTRATION START ---');
  console.log('Attempting to register user with email:', email);
  console.log('User data:', userData);
  
  try {
    // Clean up any existing auth state first
    cleanupAuthState();
    
    // Try to sign up the user
    const { data, error } = await supabase.auth.signUp({
      email,
      password,
      options: {
        data: userData,
      },
    });
    
    if (error) {
      console.error('Registration error:', error);
      return { success: false, error };
    }
    
    console.log('Registration response:', data);
    
    if (!data.user) {
      console.error('No user data returned from registration');
      return { success: false, error: { message: 'No user data returned' } };
    }
    
    console.log('User successfully created with ID:', data.user.id);
    console.log('Email confirmation needed?', !data.session);
    
    return { 
      success: true, 
      user: data.user,
      session: data.session,
      emailConfirmNeeded: !data.session
    };
  } catch (error) {
    console.error('Registration exception:', error);
    return { success: false, error };
  } finally {
    console.log('--- DEBUG REGISTRATION END ---');
  }
};
