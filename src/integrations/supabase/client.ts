
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://jvllftcsvfszpkjzjkfy.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Imp2bGxmdGNzdmZzenBranpqa2Z5Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDU3MTE0ODAsImV4cCI6MjA2MTI4NzQ4MH0.6n9xJKtDgdpejCPLVDPqa3KoA_eCN4fNV4cgCxb5pzM";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    storage: localStorage,
    persistSession: true,
    autoRefreshToken: true,
    debug: false, // Disable debug mode to reduce noise
  }
});

// Helper functions for authentication to prevent common issues
export const cleanupAuthState = () => {
  // Remove auth tokens and session data
  localStorage.removeItem('supabase.auth.token');
  
  // Clear all Supabase-related keys in localStorage
  Object.keys(localStorage).forEach((key) => {
    if (key.startsWith('supabase.auth.') || key.includes('sb-')) {
      localStorage.removeItem(key);
    }
  });
  
  // Clear session storage as well if it exists
  if (typeof sessionStorage !== 'undefined') {
    Object.keys(sessionStorage).forEach((key) => {
      if (key.startsWith('supabase.auth.') || key.includes('sb-')) {
        sessionStorage.removeItem(key);
      }
    });
  }
};

// Check if an email is already registered
export const isEmailRegistered = async (email: string): Promise<boolean> => {
  try {
    // First, check if we can find a user with this email by signing in with a bogus password
    const { error: signInError } = await supabase.auth.signInWithPassword({
      email,
      password: 'password_check_only_' + Math.random().toString(36).substring(2), // Random invalid password
    });
    
    // If the error says invalid credentials, the email exists
    if (signInError && signInError.message.includes("Invalid login credentials")) {
      return true; // Email exists
    }
    
    // If there's some other error, it's likely the user doesn't exist
    if (signInError && signInError.message.includes("Email not confirmed")) {
      return true; // Email exists but is not confirmed
    }
    
    // Also try the password reset as a backup verification
    const { error } = await supabase.auth.resetPasswordForEmail(email, {
      redirectTo: `${window.location.origin}/auth?tab=login`,
    });
    
    // No error means email exists (we're not actually sending the reset email)
    if (!error) {
      return true;
    }
    
    // Check the error message to determine if the email is registered
    if (error.message.includes("For security purposes") || 
        error.message.includes("If your email exists")) {
      return true;
    }
    
    // Email likely doesn't exist
    return false;
  } catch (error) {
    console.error('Error checking email registration:', error);
    // In case of an error, we assume the email is registered to be safe
    return true; 
  }
};

// Check if a PulseID is already taken
// FOR TESTING: Always return true for 'rickj' to simulate it being taken
export const isPulseIdTaken = async (pulseId: string): Promise<boolean> => {
  try {
    if (!pulseId || pulseId.trim() === '') {
      return true; // Consider empty pulseId as taken
    }
    
    // Test case: Force 'rickj' to always show as taken
    if (pulseId.toLowerCase() === 'rickj') {
      console.log('PulseID rickj is TAKEN (test override)');
      return true;
    }
    
    // Check if PulseID exists in profiles table
    const { data, error } = await supabase
      .from('profiles')
      .select('username')
      .eq('username', pulseId)
      .maybeSingle();
      
    if (error) {
      console.error('Error checking PulseID availability:', error);
      return true; // Assume taken on error to be safe
    }
    
    // If data exists, PulseID is taken
    const isTaken = !!data;
    console.log(`PulseID ${pulseId} is ${isTaken ? 'TAKEN' : 'available'}`);
    return isTaken;
  } catch (error) {
    console.error('Error checking PulseID:', error);
    return true; // Assume taken on error
  }
};
