
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://vzbadytmoatrwrvgemne.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InZ6YmFkeXRtb2F0cndydmdlbW5lIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDY3Mjg5MzIsImV4cCI6MjA2MjMwNDkzMn0.KdyaGRXGKULvjiclJsDFdtDdpb_i8F7wTsPweJPnFa0";

// Create the Supabase client with explicit auth configuration
export const supabase = createClient<Database>(
  SUPABASE_URL, 
  SUPABASE_PUBLISHABLE_KEY,
  {
    auth: {
      storage: localStorage,
      persistSession: true,
      autoRefreshToken: true,
    }
  }
);

/**
 * Cleanup auth state by removing all Supabase related keys from storage
 * This helps prevent "auth limbo" issues where old tokens remain
 */
export const cleanupAuthState = () => {
  // Remove standard auth tokens
  localStorage.removeItem('supabase.auth.token');
  
  // Remove all Supabase auth keys from localStorage
  Object.keys(localStorage).forEach((key) => {
    if (key.startsWith('supabase.auth.') || key.includes('sb-')) {
      localStorage.removeItem(key);
    }
  });
  
  // Also clean sessionStorage if in use
  if (typeof sessionStorage !== 'undefined') {
    Object.keys(sessionStorage).forEach((key) => {
      if (key.startsWith('supabase.auth.') || key.includes('sb-')) {
        sessionStorage.removeItem(key);
      }
    });
  }
};

/**
 * Check if an email is already registered using format check only
 */
export const isEmailRegistered = async (email: string): Promise<boolean> => {
  try {
    // Only do format validation to avoid rate limits
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    if (!emailRegex.test(email)) {
      return false; // Invalid email format
    }
    
    // Don't actually check with Supabase to avoid rate limits
    // Just return false to allow registration attempt
    return false;
  } catch (error) {
    console.error('Error checking email existence:', error);
    return false;
  }
};

/**
 * Check if a PulseID is already taken by another user
 */
export const isPulseIdTaken = async (pulseId: string): Promise<boolean> => {
  try {
    // Skip validation for very short pulse IDs to avoid unnecessary requests
    if (pulseId.length < 3) {
      return false;
    }
    
    const { data, error, status } = await supabase
      .from('users')
      .select('id')
      .eq('pulse_id', pulseId)
      .maybeSingle();
    
    if (error && status !== 406) {
      throw error;
    }
    
    return !!data; // If data exists, the pulseId is taken
  } catch (error) {
    console.error('Error checking PulseID:', error);
    // On error, assume ID is not taken to avoid blocking registration
    return false;
  }
};
